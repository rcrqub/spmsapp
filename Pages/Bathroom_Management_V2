import streamlit as st
import pandas as pd

current_data = pd.read_csv('BathroomData.csv')

st.set_page_config(page_title="SPMS", page_icon=':toilet:')
st.title("Bathroom and Product Management")

# Function to add a new bathroom
def add_bathroom(description):
    new_bathroom = {'bathroom_id': len(current_data) + 1, 'bathroom_description': description}
    current_data = pd.concat([current_data, pd.DataFrame([new_bathroom])], ignore_index=True)
    current_data.to_csv('BathroomData.csv', index=False)

# Function to remove a bathroom
def remove_bathroom(bathroom_id):
    current_data = current_data[current_data['bathroom_id'] != bathroom_id]
    current_data.to_csv('BathroomData.csv', index=False)

# Function to update product stock_level for a specific bathroom
def update_stock_level(bathroom_id, item_type, new_stock_level):
    current_data.loc[(current_data['bathroom_id'] == bathroom_id) & (current_data['item_type'] == item_type), 'stock_level'] = new_stock_level
    current_data.to_csv('BathroomData.csv', index=False)

st.subheader('Bathroom Management')

# User interface for adding a bathroom
if st.button('ðŸŸ¢ Add Bathroom'):
    bathroom_description = st.text_input("Enter Bathroom Description:")
    if bathroom_description.strip() != "":
        add_bathroom(bathroom_description)
        st.success(f"Bathroom '{bathroom_description}' added successfully.")


# User interface for removing a bathroom
if st.button('ðŸ”´ Remove Bathroom'):
    bathroom_to_remove = st.selectbox("Select Bathroom to Remove", current_data['bathroom_description'].unique())
    bathroom_id_to_remove = current_data[current_data['bathroom_description'] == bathroom_to_remove]['bathroom_id'].values[0]
    
    confirmation = st.checkbox(f"Confirm removal of bathroom '{bathroom_to_remove}'")
    if confirmation:
        remove_bathroom(bathroom_id_to_remove)
        st.success(f"Bathroom '{bathroom_to_remove}' removed successfully.")

st.subheader('Bathroom\'s Available')
col1, col2= st.columns(2)

with col1:
    st.markdown("*Bathroom ID*")
    for bathroom_id in current_data['bathroom_id'].unique():
        st.write(f"{bathroom_id}")

with col2:
    st.markdown("*Description*")
    for description in current_data['bathroom_description'].unique():
        st.write(f"{description}")

st.subheader(f"Product Management")
# User interface for updating product stock_level
selected_bathroom = st.selectbox("Select Bathroom:", current_data['bathroom_description'].unique())

selected_products = current_data[current_data['item_type'] == selected_bathroom]

if not selected_products.empty:
    st.write(f"Procut Management for Bathroom '{selected_bathroom}'")
    for index, row in selected_products.iterrows():
        item_type = row['item_type']
        current_stock_level = row['stock_level']
        st.write(f"Item Type: {item_type}, Current stock_level: {current_stock_level}")

        new_stock_level = st.number_input(f"Enter new stock_level for Item Type {item_type}:", value=current_stock_level)
        if st.button(f"Update stock_level for Item Type {item_type}"):
            update_stock_level(row['bathroom_id'], item_type, new_stock_level)
            st.success(f"stock_level for Item Type {item_type} updated successfully.")
else:
    st.warning(f"No products found for Bathroom '{selected_bathroom}'.")